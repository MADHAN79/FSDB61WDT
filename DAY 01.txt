JavaScript - Day -1: Introduction to Browser & web
18/06/2024 - Tuesday - 6:00 PM : 9:00 PM

Introduction:

HTTP stands for Hypertext Transfer Protocol, which is a protocol for transferring data over the web. It is the foundation of data communication on 
the World Wide Web and is used to request and transmit web pages, images, videos, and other resources between web servers and web clients, such as 
browsers or mobile applications.
HTTP is a client-server protocol, which means that it involves communication between a client (such as a web browser or mobile app) and a server 
(which hosts the website or web application). The client sends an HTTP request to the server, which then sends an HTTP response back to the client.
The response contains the requested data or resource, such as a web page, image, or video.
HTTP is a stateless protocol, which means that each request and response is independent and does not rely on any previous messages. This makes the 
protocol simpler and more scalable, but it can also lead to performance issues.
There have been several versions of the HTTP protocol, including HTTP 1.0, HTTP 1.1, HTTP/2, and HTTP/3, each with its own set of features and improvements.

==============
1. HTTP 1.1  |
==============

HTTP 1 (Hypertext Transfer Protocol version 1) is the original version of the HTTP protocol, which is used for communication between web servers and clients,
such as web browsers. HTTP 1.0 was introduced in 1996, and HTTP 1.1 was introduced in 1999.

HTTP 1.0 uses a simple request-response model, where a client sends a request to a server, and the server sends a response back to the client. 
The request and response messages are transmitted as plain text over the network, with the header and body separated by a blank line.

HTTP 1.0 was designed for a simpler web environment, where most web pages were static and simple. However, as the web grew more complex and dynamic, 
HTTP 1.0 became insufficient to handle the demands of modern web applications.

Benefits & Drawbacks
Here are some benefits of HTTP 1.1:

Persistent connections: 
HTTP 1.1 supports persistent connections, which allow multiple requests and responses to be sent over the same TCP connection. 
This reduces the overhead of establishing new connections for each request and improves the performance of the protocol.

Pipelining: 
HTTP 1.1 supports pipelining, which allows multiple requests to be sent without waiting for the corresponding responses. This reduces the 
latency of the protocol and improves its performance.

Caching: 
HTTP 1.1 introduced several caching features, including the ability to specify cache-control directives, which can reduce the amount of data 
that needs to be transmitted between the client and server.

Chunked transfer encoding: 
HTTP 1.1 introduced the ability to transfer large amounts of data in chunks, which can improve the efficiency of data transfer 
and reduce latency.

Improved error handling: 
HTTP 1.1 introduced more detailed error codes and improved error handling, which can help developers troubleshoot and resolve 
issues more quickly.
While HTTP 1.1 has been a major contributor to the growth of the World Wide Web, it has several limitations that have been addressed in newer versions 
of HTTP, such as HTTP/2 and HTTP/3.

Here are some of the main limitations of HTTP 1.1:

Lack of multiplexing: 
HTTP 1.1 only allows a single request and response to be sent over a single connection at a time, which can lead to performance 
issues when multiple requests are made simultaneously.

Header inefficiency: 
HTTP 1.1 sends headers with each request and response, which can result in a lot of overhead and slow down performance, especially 
for large data transfers.

Inability to prioritize requests: 
HTTP 1.1 does not provide a mechanism for prioritizing requests, which means that requests can be processed in any order, 
regardless of their importance or urgency.

No support for server push: 
HTTP 1.1 does not support server push, which means that the server cannot initiate the transfer of data to the client without 
first receiving a request.

Inefficient handling of TCP connections: 
HTTP 1.1 relies on the underlying TCP protocol for reliable data transfer, which can lead to performance issues,
especially for high-latency connections.

These limitations have been addressed in newer versions of HTTP, such as HTTP/2 and HTTP/3, which provide features such as multiplexing, header compression,
request prioritization, server push, and improved handling of TCP connections.

Overall, HTTP 1.1 improved the performance and functionality of the protocol, making it more efficient and scalable for modern web applications. 
However in response to these limitations, HTTP 1.1 was introduced with several improvements, including support for persistent connections, pipelining and 
improved caching. However, even with these improvements, HTTP 1.1 still has limitations and performance issues, which led to the development of HTTP/2 and 
later HTTP/3 protocols.

============
2. HTTP 2  |
============

HTTP/2 (Hypertext Transfer Protocol version 2) is an updated version of the HTTP protocol, which was introduced in 2015. It was designed to address some of 
the limitations and performance issues of HTTP/1.1 and improve the speed and efficiency of web communication.

Benefits & Drawbacks
Here are some key features of HTTP/2:

Multiplexing: 
HTTP/2 allows multiple requests and responses to be sent over a single connection, which improves the performance of the protocol by reducing 
the overhead of establishing new connections.

Binary protocol: 
HTTP/2 uses a binary protocol instead of the text-based protocol used in HTTP/1.1. This reduces the size of the data transmitted between 
the client and server, improving the efficiency of the protocol.

Header compression: 
HTTP/2 uses header compression to reduce the size of header data, which can be significant in HTTP/1.1. This also helps to improve 
the efficiency of the protocol and reduce latency.

Server push: 
HTTP/2 allows the server to send multiple responses to a single request, which can improve the speed and efficiency of web applications.

Prioritization: 
HTTP/2 allows the client to specify the priority of requests, which can improve the responsiveness of the protocol and reduce latency.
While HTTP/2 offers significant performance improvements over HTTP/1.1, there are also some potential drawbacks to consider:

Implementation complexity: 
HTTP/2 is a more complex protocol than HTTP/1.1, which can make it more difficult and time-consuming to implement and maintain.

Server resource consumption: 
HTTP/2 can consume more server resources than HTTP/1.1, particularly in cases where a large number of concurrent connections 
are established.Interoperability issues: Not all web servers and browsers support HTTP/2, and some older applications may not be compatible with the new 
protocol. This can lead to interoperability issues and may require additional configuration and testing.

Security concerns: 
The use of binary data in HTTP/2 can make it more difficult to inspect and secure network traffic, which could potentially lead to 
security vulnerabilities.

Performance limitations: 
While HTTP/2 offers significant improvements over HTTP/1.1, its performance is still limited by factors 
such as network latency and bandwidth, which can impact the overall speed and efficiency of web communication.

CONCLUSION:
===========
Overall, HTTP/2 offers significant performance improvements over HTTP/1.1, particularly for complex web applications that require multiple requests and 
responses. However, not all web servers and browsers support HTTP/2, and some older applications may not be compatible with the new protocol.
